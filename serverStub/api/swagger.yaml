openapi: 3.0.3
info:
  title: Eyada API
  description: "CRUD operations for Doctors and Patients, and the Eyade-Scheduler"
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/NOUREDDINBAKIR_1/Eyada/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:8080
  description: localhost
security:
- ApiKeyAuth: []
tags:
- name: doctor
  description: CRUD Doctor operations
- name: organization
  description: CRUD Org operations
- name: patient
  description: CRUD Patient operations
paths:
  /doctor:
    get:
      tags:
      - doctor
      summary: Return a list of Doctors
      description: Get list of Doctors
      operationId: getDoctors
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        "400":
          description: Invalid ID supplied
        "401":
          description: Unauthorized
        "405":
          description: Validation exception
    post:
      tags:
      - doctor
      summary: Create a new Doctor
      description: Create new Doctor with Organization ID
      operationId: postDoctor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        "400":
          description: Invalid ID supplied
        "401":
          description: Unauthorized
        "405":
          description: Validation exception
  /doctor/{organizationID}:
    get:
      tags:
      - doctor
      summary: Update an existing Doctor
      description: Update an existing doctor by their ID
      operationId: getDoctorByID
      parameters:
      - name: organizationID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: "ID is generated before POST request. This is the public-facing\
            \ id, i.e. shareable."
          format: int64
      responses:
        "201":
          description: Successfully updated Doctor information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        "400":
          description: Invalid ID supplied
        "401":
          description: Unauthorized
        "404":
          description: Doctor ID not found
  /doctor/{doctorID}:
    get:
      tags:
      - doctor
      summary: Update an existing Doctor
      description: Update an existing doctor by their ID
      operationId: getDoctorByOrgID
      parameters:
      - name: doctorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: string
      responses:
        "201":
          description: Successfully updated Doctor information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        "400":
          description: Invalid ID supplied
        "401":
          description: Unauthorized
        "404":
          description: Doctor ID not found
    put:
      tags:
      - doctor
      summary: Update an existing Doctor
      description: Update an existing doctor by their ID
      operationId: updateDoctor
      parameters:
      - name: doctorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: string
      requestBody:
        description: Update an existent Doctor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
        required: true
      responses:
        "201":
          description: Successfully updated Doctor information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        "400":
          description: Invalid ID supplied
        "401":
          description: Unauthorized
        "404":
          description: Doctor ID not found
    delete:
      tags:
      - doctor
      summary: Delete Doctor by ID
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
      - name: doctorID
        in: path
        description: ID of the Doctor that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: "ID is generated before POST request. This is the public-facing\
            \ id, i.e. shareable."
          format: int64
      responses:
        "200":
          description: Doctor deleted
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /organization:
    post:
      tags:
      - organization
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "400":
          description: Invalid ID supplied
        "401":
          description: Unauthorized
        "404":
          description: Organization ID not found
  /organization/{organizationID}:
    get:
      tags:
      - organization
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      parameters:
      - name: organizationID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: string
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "400":
          description: Invalid ID supplied
        "401":
          description: Unauthorized
        "404":
          description: Organization ID not found
    put:
      tags:
      - organization
      summary: Update Organization information
      description: Update Organization
      operationId: updateOrganization
      parameters:
      - name: organizationID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "400":
          description: Invalid ID supplied
        "401":
          description: Unauthorized
        "404":
          description: Organization ID not found
    delete:
      tags:
      - organization
      summary: Update Organization information
      description: Update Organization
      operationId: deleteOrganization
      parameters:
      - name: organizationID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "401":
          description: Unauthorized
        "404":
          description: Organization ID not found
  /patient:
    post:
      tags:
      - patient
      summary: Create patient
      description: This can only be done by the logged in patient.
      operationId: createPatient
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        "401":
          description: Unauthorized
  /patient/{doctorID}:
    get:
      tags:
      - patient
      summary: Get user by patients
      description: ""
      operationId: getPatientsByDocotr
      parameters:
      - name: doctorID
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: "ID is generated before POST request. This is the public-facing\
            \ id, i.e. shareable."
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        "400":
          description: Invalid username supplied
        "404":
          description: Patient not found
  /patient/{organizationID}:
    get:
      tags:
      - patient
      summary: Get user by patients
      description: ""
      operationId: getPatientsByOrganization
      parameters:
      - name: organizationID
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: "ID is generated before POST request. This is the public-facing\
            \ id, i.e. shareable."
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        "400":
          description: Invalid username supplied
        "404":
          description: Patient not found
  /patient/{patientID}:
    get:
      tags:
      - patient
      summary: Get user by patients
      description: ""
      operationId: getPatientsByID
      parameters:
      - name: patientID
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: "ID is generated before POST request. This is the public-facing\
            \ id, i.e. shareable."
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        "400":
          description: Invalid username supplied
        "404":
          description: Patient not found
    put:
      tags:
      - patient
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updatePatient
      parameters:
      - name: patientID
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: "ID is generated before POST request. This is the public-facing\
            \ id, i.e. shareable."
          format: int64
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - patient
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deletePatient
      parameters:
      - name: patientID
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: "ID is generated before POST request. This is the public-facing\
            \ id, i.e. shareable."
          format: int64
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: Patient not found
components:
  schemas:
    Doctor:
      required:
      - email
      - id
      - phone
      type: object
      properties:
        id:
          type: integer
          description: "ID is generated before POST request. This is the public-facing\
            \ id, i.e. shareable."
          format: int64
        email:
          type: string
          example: doctor@gmail.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        phone:
          type: integer
          description: "Phone number must include country code, no non-numerical characters"
          format: int64
          example: 15554443333
        organizationIDs:
          type: array
          items:
            type: string
            description: "ID is generated before POST request. This is the public-facing\
              \ id, i.e. shareable."
            example: "[\"doc1Org2_Abc\",\"doc1Org2_Abc\",\"doc1Org2_Abc\"]"
      example:
        firstName: John
        lastName: James
        phone: 15554443333
        organizationIDs:
        - "[\"doc1Org2_Abc\",\"doc1Org2_Abc\",\"doc1Org2_Abc\"]"
        - "[\"doc1Org2_Abc\",\"doc1Org2_Abc\",\"doc1Org2_Abc\"]"
        id: 0
        email: doctor@gmail.com
    Organization:
      required:
      - email
      - id
      - number
      type: object
      properties:
        id:
          type: string
          description: "ID is generated before POST request. This is the public-facing\
            \ id, i.e. shareable."
          example: doc1Org2_Abc
        address:
          $ref: '#/components/schemas/Address'
        email:
          type: string
          format: string
          example: Organization1@gmail.com
        number:
          type: integer
          format: int64
          example: 15554443333
        doctors:
          type: array
          example:
          - "doc1@gmail,com"
          - doc2@gmail.com
          - doc4@gmail.com
          items:
            type: string
      example:
        number: 15554443333
        address:
          zip: "94301"
          city: Palo Alto
          street: 437 Lytton
          state: CA
        doctors:
        - "doc1@gmail,com"
        - doc2@gmail.com
        - doc4@gmail.com
        id: doc1Org2_Abc
        email: Organization1@gmail.com
    Patient:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
      example:
        address:
        - zip: "94301"
          city: Palo Alto
          street: 437 Lytton
          state: CA
        - zip: "94301"
          city: Palo Alto
          street: 437 Lytton
          state: CA
        id: 100000
        username: fehguy
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      example:
        zip: "94301"
        city: Palo Alto
        street: 437 Lytton
        state: CA
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
